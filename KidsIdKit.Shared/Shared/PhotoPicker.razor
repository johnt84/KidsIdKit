@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Forms
@using KidsIdKit.Data;

<div class="border border-3">
    <InputFile OnChange="FileSelectedAsync" />

    <div class="alert-danger">@errorText</div>
    @if (!string.IsNullOrEmpty(photo.ImageSource))
    {
        <img src="@photo.ImageSource" class="restricted-width" title="@photo.FileName" alt="Photo of child" />
        <br />
        <button type="button" class="btn btn-primary" @onclick="UseFileAsync">Use this image</button>
    }
    <button type="button" class="btn btn-secondary" @onclick="CancelChoiceAsync"><i class="fas fa-chevron-left" /></button>
</div>

@code 
{
    [Parameter]
    public EventCallback<Photo> Complete { get; set; }
    [Parameter]
    public EventCallback Cancel { get; set; }
    private string? errorText;
    private Photo photo = new();

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(Complete);
        ArgumentNullException.ThrowIfNull(Cancel);
    }

    private async Task FileSelectedAsync(InputFileChangeEventArgs e)
    {
        errorText = string.Empty;
        try
        {
            photo.FileName = e.File.Name;
            var photoFile = await e.File.RequestImageFileAsync(e.File.ContentType, 200, 200);
            using var stream = photoFile.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            photo.ImageSource = $"data:{photoFile.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
        }
        catch (Exception ex)
        {
            errorText = ex.Message;
        }
    }

    private async Task UseFileAsync()
    {
        if (!string.IsNullOrEmpty(photo.ImageSource))
        {
            await Complete.InvokeAsync(photo);
        }
    }

    private async Task CancelChoiceAsync()
    {
        await Cancel.InvokeAsync();
    }
}